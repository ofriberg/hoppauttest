const express = require("express");
const router = express.Router();
const axios = require("axios");

const auth = async ({ personalNumber }) => {
  const response = await axios({
    method: "get",
    headers: { "content-type": "application/json" },
    url: `http://localhost:5000/api/BankID/Auth?ip=127.0.0.1&personalNumber=${personalNumber}`
  }).then(r => r.data);

  return response;
};

const collect = async ({ orderRef }) => {
  const response = await axios({
    method: "get",
    headers: { "content-type": "application/json" },
    url: `http://localhost:5000/api/BankID/Collect?orderRef=${orderRef}`
  }).then(r => r.data);

  return response;
};

const poller = async ({ orderRef }) => {
  while (true) {
    const { status, hintCode, completionData } = await collect({ orderRef });
    console.log("status", status);
    if (status === "failed") {
      return { ok: false, status: hintCode };
    }
    if (status === "complete") {
      return { ok: true, status: completionData };
    }
    console.log(hintCode);

    await new Promise(resolve => setTimeout(resolve, 2000));
  }
};

router.get("/", async (request, response) => {
  const { personalNumber } = request.query;
  console.log("BANK GET EP");
  const result = await auth({ personalNumber });
  console.log("result", result);
  const { orderRef } = result;
  const pollingResult = await poller({ orderRef });
  console.log("pollingResult", pollingResult);

  if (pollingResult.ok) {
    const { status } = pollingResult;
    const { user } = status;
    response.status(200).json({ user });
  } else {
    response.status(400).json({ error: "some error" });
  }
});

module.exports = router;

/* 
    {
        "autoStartToken": "9bc02561-8988-49b8-ae71-b9d18c0dadcb",
        "orderRef": "648a68b2-8ab0-4cbe-bf89-c1109237bbc3"
    }
  */

/* 
    {
        "orderRef": "648a68b2-8ab0-4cbe-bf89-c1109237bbc3",
        "status": "pending",
        "hintCode": "noClient",
        "completionData": null
    }
  */
/* 
 {
    "orderRef": "648a68b2-8ab0-4cbe-bf89-c1109237bbc3",
    "status": "pending",
    "hintCode": "userSign",
    "completionData": null
}
 */

/* 
 {
    "orderRef": "648a68b2-8ab0-4cbe-bf89-c1109237bbc3",
    "status": "failed",
    "hintCode": "expiredTransaction",
    "completionData": null
}
{
    "orderRef": "aefd4eee-cd31-4616-bb61-596f0ffe7e64",
    "status": "failed",
    "hintCode": "userCancel",
    "completionData": null
}
 */

/* 
 
    "orderRef": "4d358e69-d940-40f4-8e12-af27687a2c4a",
    "status": "complete",
    "hintCode": null,
    "completionData": {
        "ocspResponse": "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",
        "signature": "",
        "cert": {
            "notAfter": "1637189999000",
            "notBefore": "1574031600000"
        },
        "device": {
            "ipAddress": "78.82.217.121"
        },
        "user": {
            "givenName": "Oscar",
            "name": "Oscar Friberg",
            "personalNumber": "198906010056",
            "surname": "Friberg"
        }
    }
}
 */

/* 
  
var intervalID = window.setInterval(checkWeatherAPI, 1000);

function checkWeatherAPI() {
  // go check API
    var d = new Date();
    var n = d.getSeconds();
    console.log(n);
    if (n === 25) {
        window.clearInterval(intervalID);
    }

}
  */
